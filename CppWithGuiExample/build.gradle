buildscript{
    dependencies{
        classpath files(System.getProperty("user.home") + '/.m2/repository/com/snobot/simulator/plugin/SnobotSimulatorPlugin/2019-0.0.0/SnobotSimulatorPlugin-2019-0.0.0.jar')
    }
}

plugins {
    id "cpp"
    id "java" // Required for GUI based SnobotSim
    id "edu.wpi.first.GradleRIO" version "2019.1.1-beta-1"
    id 'edu.wpi.first.GradleJni' version '0.3.1'
    id "edu.wpi.first.GradleVsCode" version "0.4.1"
}
repositories {
    maven { url "http://first.wpi.edu/FRC/roborio/maven/release/" }
}

apply plugin: com.snobot.simulator.plugin.SnobotSimulatorPlugin

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        target("roborio", edu.wpi.first.gradlerio.frc.RoboRIO) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = getTeamNumber()
        }
    }
    artifacts {
        artifact('frcCpp', edu.wpi.first.gradlerio.frc.FRCNativeArtifact) {
            targets << "roborio"
            component = 'frcUserProgram'
            // Debug can be overridden by command line, for use with VSCode
            debug = getDebugOrDefault(false)
        }
    }
}

model {
    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform 'roborio'

            // -g is the debug information flag. You should leave this here, unless
            // you have good reason to remove it.
            binaries.all {
                cppCompiler.args('-g')
            }

            sources.cpp {
                source {
                    srcDir 'src/main/cpp'
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                }
            }

            // Defining my dependencies. In this case, WPILib (+ friends), CTRE Toolsuite (Talon SRX)
            // and NavX.
            useLibrary(it, "wpilib")
        }
    }
}

///////////////////////////////////////////////////////////
// SnobotSim
configurations { snobotSimCompile }
sourceSets {
    main {
        java {
            srcDirs 'build/tmp/SnobotSimWrapper'
        }
    }
 }
 
dependencies {
    compile wpilib()
    snobotSimCompile snobotSimCpp()
}

model {
    components {

        snobotSimCppWrapper(JniNativeLibrarySpec) {
            targetPlatform 'desktop'
            
            enableCheckTask true
            javaCompileTasks << compileJava
            jniCrossCompileOptions << JniCrossCompileOptions('athena')

            sources.cpp {
                source {
                    srcDirs 'src/main/cpp', "build/tmp/SnobotSimWrapper"
                    include "**/*.cpp"
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                }
            }
            binaries.all {
                cppCompiler.args('-DSTANDALONE_SNOBOT_SIM')
            }

            // Defining my dependencies. In this case, WPILib (+ friends), CTRE Toolsuite (Talon SRX)
            // and NavX.
            useLibrary(it, "wpilib")
            useLibrary(it, "snobot_sim_cpp")
        }
    }
}

///////////////////////////////////////////////////////////

wrapper {
    gradleVersion = '4.9'
}
