plugins {
    id "cpp"
    id "java" // Required for GUI based SnobotSim
    id "google-test-test-suite"
    id 'edu.wpi.first.GradleJni' version '0.3.1'
    id "edu.wpi.first.GradleRIO" version "2019.1.1-beta-2a"
    id "com.snobot.simulator.plugin.SnobotSimulatorPlugin" version "2019-0.0.0" apply false
}

repositories {
    maven { url "http://first.wpi.edu/FRC/roborio/maven/release/" }
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = getTeamNumber()
        }
    }
    artifacts {
        frcNativeArtifact('frcCpp') {
            targets << "roborio"
            component = 'frcUserProgram'
            // Debug can be overridden by command line, for use with VSCode
            debug = getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Set this to true to include the src folder in the include directories passed
// to the compiler. Some eclipse project imports depend on this behavior.
// We recommend leaving this disabled if possible. Note for eclipse project
// imports this is enabled by default. For new projects, its disabled
def includeSrcInIncludeRoot = false

model {
    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform 'roborio'
            targetPlatform 'desktop'

            sources.cpp {
                source {
                    srcDir 'src/main/cpp'
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                    if (includeSrcInIncludeRoot) {
                        srcDir 'src/main/cpp'
                    }
                }
            }

            // Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
            useLibrary(it, "wpilib")
            useCppVendorLibraries(it)
        }
    }
    testSuites {
        frcUserProgramTest(GoogleTestTestSuiteSpec) {
            testing $.components.frcUserProgram

            sources.cpp {
                source {
                    srcDir 'src/test/cpp'
                    include '**/*.cpp'
                }
            }

            useLibrary(it, "wpilib", "googletest")
            useCppVendorLibraries(it)
        }
    }
}

///////////////////////////////////////////////////////////
// SnobotSim
apply plugin: com.snobot.simulator.plugin.SnobotSimulatorPlugin

configurations { snobotSimCompile }
sourceSets {
    main {
        java {
            srcDirs 'build/tmp/SnobotSimWrapper'
        }
    }
 }
 
dependencies {
    compile wpilib()
    snobotSimCompile snobotSimCpp()
}

model {
    components {

        snobotSimCppWrapper(JniNativeLibrarySpec) {
            targetPlatform 'desktop'
            
            enableCheckTask true
            javaCompileTasks << compileJava
            jniCrossCompileOptions << JniCrossCompileOptions('athena')

            sources.cpp {
                source {
                    srcDirs 'src/main/cpp', "build/tmp/SnobotSimWrapper"
                    include "**/*.cpp"
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                }
            }
            binaries.all {
                cppCompiler.args('-DSTANDALONE_SNOBOT_SIM')
            }

            // Defining my dependencies. In this case, WPILib (+ friends), CTRE Toolsuite (Talon SRX)
            // and NavX.
            useLibrary(it, "wpilib")
            useLibrary(it, "snobot_sim_cpp")
        }
    }
}

///////////////////////////////////////////////////////////
wrapper {
    gradleVersion = '4.9'
}
