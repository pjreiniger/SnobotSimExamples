
buildscript
{
    dependencies {
        classpath files('C:/Users/PJ/.m2/repository/com/snobot/simulator/plugin/SnobotSimulatorPlugin/2019-0.0.0/SnobotSimulatorPlugin-2019-0.0.0.jar')
    }
}

plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2019.1.1-beta-1"
}
repositories {
    maven { url "http://first.wpi.edu/FRC/roborio/maven/release/" }
}

def ROBOT_CLASS = "frc.robot.Robot"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        target("roborio", edu.wpi.first.gradlerio.frc.RoboRIO) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = getTeamNumber()
        }
    }
    artifacts {
        artifact('frcJava', edu.wpi.first.gradlerio.frc.FRCJavaArtifact) {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = getDebugOrDefault(false)
        }
    }
}

configurations {
    snobotSimCompile
}

/////////////////////////////////////////////////////
// Snobot Sim
apply plugin: com.snobot.simulator.plugin.SnobotSimulatorPlugin

// If you have your own simulator code, you must tell GradleRio that you want that code compiled.
// The recommended way to do it is to create a new source set, just for this, and jar it up later
sourceSets {
    simulatorExtensions
    {
        java {
            srcDirs += ["src/snobot_sim/java"]
        }
    }
}
// End Snobot Sim
/////////////////////////////////////////////////////

// Defining my dependencies. In this case, WPILib (+ friends), CTRE Toolsuite (Talon SRX)
// and NavX.
dependencies {
    compile wpilib()

    // This is always required for SnobotSim to run
    snobotSimCompile snobotSimJava()

    // This is required only if you are adding a custom simulator.
    simulatorExtensionsCompile snobotSimJava()
    simulatorExtensionsCompile wpilib()
    simulatorExtensionsCompile sourceSets.main.output

    // TODO: Hack. I haven't dug into VSCode to see why it loses intellisense if this isn't here.
    // It should build without this, but VSCode will put a lot of red lines in the simulator code
    // compile snobotSimJava()
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
}

// Force Java 8 Compatibility mode for deployed code, in case the develoment
// system is using Java 10.
compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

/////////////////////////////////////////////////////
// Snobot Sim

// You need to jar up the files in order for SnobotSim to know about your special classes. The task name has to be exactly this
task simulatorExtensionJar(type: Jar) {
    baseName = "SnobotSimExtensions"
    from sourceSets.simulatorExtensions.output
}

// This helps the plugin work easier... Whenever you build your jar, build your extension too (if it is out of date)
jar.dependsOn simulatorExtensionJar 
// End Snobot Sim
/////////////////////////////////////////////////////

wrapper {
    gradleVersion = '4.9'
}
