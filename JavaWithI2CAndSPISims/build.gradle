plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2019.2.1"
    id "com.snobot.simulator.plugin.SnobotSimulatorPlugin" version "2019-1.0.0" apply false
}

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Maven central needed for JUnit
repositories {
    mavenCentral()
}

/////////////////////////////////////////////////////
// Snobot Sim


// If you have your own simulator code, you must tell GradleRio that you want that code compiled.
// The recommended way to do it is to create a new source set, just for this, and jar it up later
sourceSets {
    simulatorExtensions
    {
        java {
            srcDirs += ["src/snobot_sim/java"]
        }
    }
}

apply plugin: com.snobot.simulator.plugin.SnobotSimulatorPlugin

// End Snobot Sim
/////////////////////////////////////////////////////

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    compile wpi.deps.wpilib()
    compile wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

    // This is always required for SnobotSim to run
    snobotSimCompile snobotSimJava()

    // This is required only if you are adding a custom simulator.
    simulatorExtensionsCompile snobotSimJava()
    simulatorExtensionsCompile wpi.deps.wpilib()
    simulatorExtensionsCompile sourceSets.main.output
    snobotSimCompile sourceSets.simulatorExtensions.output
    
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    testCompile snobotSimJava()
    testCompile sourceSets.simulatorExtensions.output
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}

test {
    useJUnitPlatform()
}

tasks.withType(Test) {
    systemProperty "java.library.path", "$rootDir/build/tmp/snobotSimJava"
}

// This isn't necessary, but running analysis on your code is a good idea. If you do it, the files should probably be in your project dir,
// but since this is shared I have it in a more centralized location
apply from: "../styleguide/java_style.gradle"

